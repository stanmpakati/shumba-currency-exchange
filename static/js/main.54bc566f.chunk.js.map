{"version":3,"sources":["utils/urls.js","components/selectMenu.js","CurrencyComponent.js","App.js","index.js"],"names":["API_URL","classNames","classes","filter","Boolean","join","SelectMenu","props","currencies","selectedCurrency","onChangeCurrency","value","onChange","open","className","Button","name","class","version","xmlns","viewBox","d","show","as","Fragment","leave","leaveFrom","leaveTo","Options","map","currency","Option","active","selected","CurrencyComponent","isBase","excludedCurrency","amount","onChangeAmount","avatar","symbol","usedCurrencyObjects","currencyObject","find","type","App","baseAmount","toAmount","useState","isLoading","setIsLoading","fromCurrency","setFromCurrency","toCurrency","setToCurrency","setAmount","changingBase","setChangingBaseCurrency","exchangeRate","setExchangeRate","useEffect","fetch","then","res","json","currencyData","query","base_currency","convertingCurrency","data","e","target","onClick","temp","width","height","fill","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54bc566f.chunk.js","sourcesContent":["export const API_URL =\n  \"https://freecurrencyapi.net/api/v2/latest?apikey=5cb524a0-44c8-11ec-97c7-17875814f6a5\";\n","/* This example requires Tailwind CSS v2.0+ */\nimport { Fragment } from \"react\";\nimport { Listbox, Transition } from \"@headlessui/react\";\n\n// Function to track classNames\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\n\nexport default function SelectMenu(props) {\n  /**\n   * Function renders a select menu where you can pick a different currency from the dropdown\n   * recieves a props object which contains:\n   * * currencies: an array of currency objects with a currency's\n   * * * value: a currency's abbreviation\n   * * * name: full name of the currency\n   * * * symbol: the currency symbol\n   *\n   * * selectedCurrency: the currency chosen from the dropdown\n   *\n   * * onChangeCurrency: a function that notifies the parent when the selectedCurrency is changed\n   */\n  const { currencies, selectedCurrency, onChangeCurrency } = props;\n\n  return (\n    <Listbox value={selectedCurrency.value} onChange={onChangeCurrency}>\n      {({ open }) => (\n        <>\n          <div className=\"mt-1 relative\">\n            <Listbox.Button className=\"relative w-full bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\n              <span className=\"flex items-center\">\n                {/* <img\n                  src={selectedCurrency.avatar}\n                  alt=\"\"\n                  className=\"flex-shrink-0 h-6 w-6 rounded-full\"\n                /> */}\n                <span className=\"ml-3 block truncate\">\n                  <strong>{selectedCurrency.value} - </strong>\n                  {selectedCurrency.name}\n                </span>\n\n                <span className=\"flex-grow\"></span>\n\n                <svg\n                  class=\"h-4 float-left fill-current text-gray-600\"\n                  version=\"1.1\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 129 129\"\n                  enable-background=\"new 0 0 129 129\"\n                >\n                  <g>\n                    <path d=\"m121.3,34.6c-1.6-1.6-4.2-1.6-5.8,0l-51,51.1-51.1-51.1c-1.6-1.6-4.2-1.6-5.8,0-1.6,1.6-1.6,4.2 0,5.8l53.9,53.9c0.8,0.8 1.8,1.2 2.9,1.2 1,0 2.1-0.4 2.9-1.2l53.9-53.9c1.7-1.6 1.7-4.2 0.1-5.8z\" />\n                  </g>\n                </svg>\n              </span>\n            </Listbox.Button>\n\n            <Transition\n              show={open}\n              as={Fragment}\n              leave=\"transition ease-in duration-100\"\n              leaveFrom=\"opacity-100\"\n              leaveTo=\"opacity-0\"\n            >\n              <Listbox.Options className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n                {currencies.map((currency) => (\n                  <Listbox.Option\n                    key={currency.value}\n                    className={({ active }) =>\n                      classNames(\n                        active ? \"text-white bg-indigo-600\" : \"text-gray-900\",\n                        \"cursor-default select-none relative py-2 pl-3 pr-9\"\n                      )\n                    }\n                    value={currency}\n                  >\n                    {({ selected, active }) => (\n                      <>\n                        <div className=\"flex items-center\">\n                          {/* <img\n                            src={currency.avatar}\n                            alt=\"\"\n                            className=\"flex-shrink-0 h-6 w-6 rounded-full\"\n                          /> */}\n                          <span\n                            className={classNames(\n                              selected ? \"font-semibold\" : \"font-normal\",\n                              \"ml-3 block truncate\"\n                            )}\n                          >\n                            <strong>{currency.value} - </strong>\n                            {currency.name}\n                          </span>\n                        </div>\n                      </>\n                    )}\n                  </Listbox.Option>\n                ))}\n              </Listbox.Options>\n            </Transition>\n          </div>\n        </>\n      )}\n    </Listbox>\n  );\n}\n","import React from \"react\";\n\nimport SelectMenu from \"./components/selectMenu\";\n\nexport default function CurrencyComponent(props) {\n  /**\n   * Function renders a component where you can select country or amount to exchange\n   * Accepts a props object which is an object which contains:\n   * * isBase: a boolean determining if component is the base or secondary\n   * * excludedCurrency: a string of the value of the currency being compared to\n   * *                   so it can be excluded and avoid duplication\n   * * selectedCurrency: a string of the highlighted currency\n   * * amount: a number for the amount in that currency\n   *\n   * * onChangeCurrency: a function that changes the state when a new currency is picked from the dropdown\n   * * onChangeAmount: a function that updates state when a user changes the amount on any text field\n   **/\n  //  Destructure the props object\n  const {\n    isBase,\n    excludedCurrency,\n    selectedCurrency,\n    amount,\n    onChangeCurrency,\n    onChangeAmount,\n  } = props;\n\n  // A list of the currencies being used and relevant data\n  const currencies = [\n    {\n      value: \"USD\",\n      name: \"United States Dollar\",\n      avatar: \"./assets/usa.svg\",\n      symbol: \"$\",\n    },\n    {\n      value: \"GBP\",\n      name: \"Great Britain Pound\",\n      avatar: \"./assets/uk.svg\",\n      symbol: \"£\",\n    },\n    { value: \"EUR\", name: \"Euro\", avatar: \"./assets/eu.svg\", symbol: \"€\" },\n    {\n      value: \"ZAR\",\n      name: \"South African Rand\",\n      avatar: \"./assets/zar.svg\",\n      symbol: \"R\",\n    },\n  ];\n\n  // list of filtered currencies (excluding the currency being compared to)\n  let usedCurrencyObjects = currencies.filter(\n    (currency) => currency.value !== excludedCurrency\n  );\n\n  // Turning the current Currency value into an object\n  const currencyObject = currencies.find(\n    (currency) => currency.value === selectedCurrency\n  );\n\n  return (\n    <div className=\"flex flex-col\">\n      <p className=\"mb-4\">{isBase ? \"From\" : \"To\"}</p>\n      <SelectMenu\n        currencies={usedCurrencyObjects}\n        selectedCurrency={currencyObject}\n        onChangeCurrency={onChangeCurrency}\n      />\n\n      <div className=\"mt-2 flex items-center border-b border-green-500 py-2\">\n        <span className=\"ml-2 font-bold\">{currencyObject.symbol}</span>\n        <input\n          type=\"number\"\n          value={amount && amount}\n          onChange={onChangeAmount}\n          className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport { API_URL } from \"./utils/urls\";\nimport CurrencyComponent from \"./CurrencyComponent\";\n\nfunction App() {\n  // Loading state indicator\n  const [isLoading, setIsLoading] = useState(true);\n  // Set Base currency\n  const [fromCurrency, setFromCurrency] = useState();\n  // Set converting currency\n  const [toCurrency, setToCurrency] = useState();\n  // Set amount\n  const [amount, setAmount] = useState(1);\n  // Track amount that needs to be changed\n  const [changingBase, setChangingBaseCurrency] = useState(true);\n  // Set exchange rate\n  const [exchangeRate, setExchangeRate] = useState();\n\n  // Initialize app by fetching the currency data and notifying other components\n  useEffect(() => {\n    // Get request to the freecurrencyapi.net API\n    fetch(API_URL)\n      .then((res) => res.json())\n      .then((currencyData) => {\n        /**\n         * currencyData is an object with the following properties:\n         * * query: an array containing the api_key, timestamp and base_currency\n         * * * base: a string showing the currency being converted from\n         * * data: an array of objects with\n         * * * Key: a string of the currency code\n         * * * Value: exchange rate relative to the base\n         * */\n\n        // For currency options get list of available currencies\n        const availableCurrencies = [\"USD\", \"GBP\", \"EUR\", \"ZAR\"];\n\n        // Set base currency\n        setFromCurrency(currencyData.query.base_currency);\n\n        // Set converting currency as the first currency that is not the base currency\n        const convertingCurrency = availableCurrencies.find(\n          (currency) => currency !== currencyData.query.base_currency\n        );\n        setToCurrency(convertingCurrency);\n\n        // Set exchange rate\n        setExchangeRate(currencyData.data[convertingCurrency]);\n\n        // Is loading is false\n        setIsLoading(false);\n      });\n  }, []);\n\n  // To run after each update of the currencies' dropdown\n  useEffect(() => {\n    /*\n     * function will update the exchange rate based on the selected currency\n     * tracks changes in the fromCurrency and toCurrency\n     */\n    if (fromCurrency && fromCurrency)\n      fetch(`${API_URL}&base_currency=${fromCurrency}`)\n        .then((res) => res.json())\n        .then((currencyData) => setExchangeRate(currencyData.data[toCurrency]));\n  }, [fromCurrency, toCurrency]);\n\n  const onChangeBaseAmount = (e) => {\n    /*\n     * Function records input from the from currency input and notifies the app\n     */\n    setAmount(e.target.value);\n    setChangingBaseCurrency(true);\n  };\n\n  const onChangeToAmount = (e) => {\n    /*\n     * Function records input from the from currency input and notifies the app\n     */\n    setAmount(e.target.value);\n    setChangingBaseCurrency(false);\n  };\n\n  // The amount of each currency\n  let baseAmount, toAmount;\n  // Changing amount of each text field based on which one was updated by the user\n  if (changingBase) {\n    baseAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    baseAmount = amount / exchangeRate;\n    toAmount = amount;\n  }\n\n  function switchCurrencies() {\n    /*\n     * function To swap the to and from dropdown values\n     */\n    let temp = fromCurrency;\n    setFromCurrency(toCurrency);\n    setToCurrency(temp);\n  }\n\n  function resetAmounts() {\n    /*\n     * function to reset the app to set the base currency as one\n     */\n    // Make the from currency the one being tracked\n    setChangingBaseCurrency(true);\n    // Change it's amount to 1\n    setAmount(1);\n  }\n\n  return (\n    <>\n      <h1 className=\"font-bold text-white text-xl absolute top-10\">\n        Shumba Money Exchange rate calculator\n      </h1>\n      {isLoading ? (\n        <p>Loading</p>\n      ) : (\n        <div className=\"container mx-auto bg-gray-50 py-4 px-8 rounded-2xl\">\n          <div className=\"mb-8 flex flex-col md:flex-row\">\n            <div className=\"flex-grow\">\n              <CurrencyComponent\n                isBase={true}\n                excludedCurrency={toCurrency}\n                selectedCurrency={fromCurrency}\n                onChangeCurrency={(data) => setFromCurrency(data.value)}\n                amount={baseAmount}\n                onChangeAmount={onChangeBaseAmount}\n              />\n            </div>\n\n            <div className=\"flex-grow-0 flex items-center justify-center mx-4 my-4 md:my-0\">\n              <button\n                onClick={switchCurrencies}\n                className=\"bg-red-600 hover:bg-red-800 text-white font-bold py-3 px-3 rounded-full\"\n              >\n                <svg\n                  width=\"32\"\n                  height=\"32\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M6.99 11L3 15L6.99 19V16H14V14H6.99V11ZM21 9L17.01 5V8H10V10H17.01V13L21 9Z\"\n                    fill=\"#FFFFFF\"\n                  />\n                </svg>\n              </button>\n            </div>\n\n            <div className=\"flex-grow\">\n              <CurrencyComponent\n                isBase={false}\n                excludedCurrency={fromCurrency}\n                selectedCurrency={toCurrency}\n                onChangeCurrency={(data) => setToCurrency(data.value)}\n                amount={toAmount}\n                onChangeAmount={onChangeToAmount}\n                className=\"flex-grow\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-between \">\n            <span className=\"text-xs text-gray-500\">\n              1 {fromCurrency} = {exchangeRate} {toCurrency}\n            </span>\n            <button\n              onClick={resetAmounts}\n              className=\"flex items-center hover:bg-gray-200 px-2 py-1\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"10.12\"\n                height=\"10.54\"\n                viewBox=\"0 0 40.5 42.17\"\n                className=\"mr-1\"\n              >\n                <path d=\"M29.4,2.65A20.85,20.85,0,0,0,8,3.64L4.92.59A2,2,0,0,0,1.5,2V13.18a2,2,0,0,0,2,2H14.67a2,2,0,0,0,1.42-3.42L13.81,9.48A13,13,0,1,1,7.68,26.56a2,2,0,0,0-2.43-1L1.43,26.66A2,2,0,0,0,.15,29.32,21,21,0,1,0,29.4,2.65Z\" />\n              </svg>\n              Reset\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}